<?php

/**
 * @file
 * Concert - een concertagenda voor Drupal
 */
 
 require_once('concert_functions.inc');
 require_once('concert_theme_table.inc');
 
 //drupal_add_js('jquery_table.js', 'file');
 
 // Constants below should be variable to be set from administration form of this module.
 define("OPERATOR_COMING", ">=");
 define("OPERATOR_PAST", "<");
 define("PAGE_CONCERTS_LIMIT", 0);
 define("CONCERT_BLOCK_LIMIT", 3);
 define("CONCERT_LIST_DATE_FORMAT_MONTH", "F");
 define("HOUR_MINUTE_SEPERATOR", ":");
 define("CONCERT_LIST_DATE_STYLE", 1);
 define("CONCERT_LIST_DATE_FORMAT", "d F G:i");
 define("CONCERT_LIST_TABLE_HEADER", TRUE);
 define("CONCERT_LIST_TABLE_ZEBRA", TRUE); // not used!
 define("CONCERT_LIST_MONTH_LOWERCASE", TRUE);
 define("CONCERT_VENUE_UNKNOWN_STRING", t('Unknown'));
 
 /**
  * implements hook_menu().
  */
function concert_menu() {
  $items['concerts'] = array(
    'title' => 'Concert',
    'page callback' => 'concert_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    );
	  
 $items['concerts/archive'] = array(
    'title' => 'Concert Archive',
    'page callback' => 'concert_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    );
	  
 $items['concerts/add'] = array(
    'title' => 'Add a concert',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('concert_form'),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    );
	  
  $items['concerts/list'] = array(
    'title' => 'Upcoming concerts',
    'page callback' => 'concert_page',
    'page arguments' => array(0),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    );
  
  $items['admin/config/content/concert'] = array(
    'title' => 'Concert module settings',
    'description' => 'Configuration for the Concert module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('concert_admin_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    );
  return $items;
}

/**
 * Implements hook_page().
 */
function concert_page($arg = NULL) {
  $renderable_array = array(); 
  $time_stamp = time();
  $now = date('o-m-d',$time_stamp)."T".date('H:i:s',$time_stamp);
  
  // TODO make array
  $archive = FALSE; 
  if ($arg == "archive") { 
    $archive = TRUE;
    $operator = OPERATOR_PAST;
    $order = 'DESC';
  } else {	
    $archive = FALSE;
    $operator = OPERATOR_COMING;
    $order = 'ASC';
  }
  
  // TODO: title and introduction text, skip explanation
  $renderable_array['explanation'] = array(
    '#markup' => t("Concert nodes will be displayed here"),
    '#prefix' => '<strong>',
    '#suffix' => '</strong>',
    );

  $years_result = concert_get_years($archive, $now); 
  
  foreach ($years_result as $years_row) {
    $renderable_array[] = array(
      '#markup' => $years_row->year,
      '#prefix' => '<p><h1>',
      '#suffix' => '</h1></p>',
      );
	
    $result = concert_get_concerts($operator, $order, PAGE_CONCERTS_LIMIT, $years_row->year);
    
    $header = array(
      array('data' => 'Datum',
		    'width' => '20%'),
      array('data' => 'Informatie',
		    'width' => '55%'),
      array('data' => 'Lokatie',
		    'width' => '25%'),
      );
      
    $rows = array();
      foreach ($result as $row) {
	$dateObject = new DateObject($row->concert_date_value, NULL, 'Y-m-d\TH:i:s');
	$dateArray = $dateObject->toArray();
	
	if (isset($row->nid)) {
	  $node = node_load($row->nid);
	}

	$date_cell = array();
  
	if (variable_get('concert_admin_date_style')) {
	  $month = date_format_date($dateObject, 'custom', variable_get('concert_admin_custom_month'));
	  if (variable_get('concert_admin_custom_month_lc')) {
	    $month = strtolower($month);
	  }
	  
	  $items = array(
	    array(
	      'data' => $dateArray['day'],
	      'class' => array('date_cell' => 'day')
	      ),
	    array(
	      'data' => $month,
	      'class' => array('date_cell' => 'month')
	      ),
	  );
		  
	  if ($node->concert_time_string) {
	    // TODO: hier geen tijd weergeven, string weergeven bovenaan informatiecell?
	    $items[] = array(
	     'data' => $node->concert_time_string['und'][0]['value'],
	     'class' => array('date_cell' => 'time_string')
	     );
	  } else {
	    $items[] = array(
	      'data' => date_pad($dateArray['hour']) . HOUR_MINUTE_SEPERATOR . date_pad($dateArray['minute']),		  
	      'class' => array('date_cell' => 'time')
	      );
	  }
	  
	  $date_cell = array(
      	    'data' => array(
              '#theme' => 'item_list',
              '#items' => $items,
	      '#attributes' => array('class' => array('concert-list-date', 'expand')),
	      ),	
	  );	
	} else {
	  // date_format_date($dateObject, $format) where $format is to be set in the admin configuration?
	  /**
	  $items = $dateArray['day'] . " " . format_date(strtotime($row->concert_date_value), 'custom', variable_get('concert_admin_custom_month'));
	  $items .= " " . date_pad($dateArray['hour']) . HOUR_MINUTE_SEPERATOR . date_pad($dateArray['minute']); 	
	  **/
	  $items = date_format_date($dateObject, "custom", variable_get('concert_admin_date_format', CONCERT_LIST_DATE_FORMAT));
	  $date_cell = array(
	    'data' => array(
	      '#type' => 'markup',
	      '#markup' => $items,
	      '#prefix' => '<div class="date">',
	      '#suffix' => '</div>'
	      ),	       
	  );
	}
      
      $info_cell = array();
      // TODO: location in 2nd column, city in 3rd.
      $location = variable_get('concert_admin_venue_unknown');
      $venue = concert_get_venue($node->nid, TRUE);
      
      /**
      if (isset($venue[0]->concert_venue_check) && $venue[0]->concert_venue_check == 0) {
	if ($venue[0]->concert_venue_node != "0") {
	  $venue_node = node_load($venue[0]->concert_venue_node); // if... ?
	  if ($venue_node->title) {
	    $location = $venue_node->title;
	  } else if ($venue_node->location && $venue_node->city) {
	     $location = $venue_node->venue_location[0]['und']['value'] . "<br/>" . $venue_node->venue_city[0]['und']['value'];
	   }
        }
      } else if (isset($venue[0]->concert_venue_check) && $venue[0]->concert_venue_check == 1) {
	$location = $venue[0]->concert_venue_location  . "<br/>" . $venue[0]->concert_venue_city;
      }
      **/
      
      $rows[] = array(
	'data' => array(
	  $date_cell,
	  array(
	    'data' => $row->title,
	    'class' => array('expand'),
	    ),
	    //l($row->title, 'node/'. $row->nid),
	  $location,
	  ),
	  'class' => array('parent'),
	  'no_striping' => FALSE,
      );
      
      $rows[] = array(
	'data' => array(
	'',
	'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi dignissim gravida vulputate. Nulla tempor, dui nec luctus gravida, ante justo dapibus libero, quis fermentum dui nisl a lorem. In hac habitasse platea dictumst. Donec ut luctus leo. Donec et consequat dui. Sed dapibus consectetur sapien gravida dignissim. Duis fermentum posuere ullamcorper.

Sed vel libero sit amet est semper mattis eu et tortor. Aenean turpis dolor, suscipit sed interdum eu, varius in quam. Curabitur imperdiet porttitor urna vel auctor. Mauris faucibus, lectus et adipiscing lobortis, ligula mi posuere turpis, sed elementum dui erat nec orci. Morbi in tellus sit amet dolor ultrices pretium quis cursus massa. Pellentesque a massa nisi, vitae semper diam. Proin molestie metus ut odio gravida dignissim. Integer ante enim, tincidunt et feugiat sit amet, pulvinar a ligula. Suspendisse placerat tincidunt elementum. In cursus nisi non leo fringilla ut dictum enim volutpat. Aenean a leo quis tellus aliquam tempus. Mauris interdum feugiat pharetra. Integer rutrum ipsum sit amet sem consectetur laoreet pellentesque lorem laoreet. Cras quis suscipit lectus.',
	'',
	),
	'class' => array('hidden'),
	'no_striping' => FALSE,
      );
    }
      
    // see http://drupal.org/node/1526940
    $table = array(
      '#theme' => 'table',
      //'#header' => $header,
      '#rows' => $rows,
      '#attributes' => array('class' => array('concert-list-table')),
      );
    
    if (variable_get('concert_admin_table_header')) {
      $table['#header'] = $header;
    }
      
    $renderable_array['table_'.$years_row->year] = $table;    
  }
  
  return $renderable_array; 
}

/**
 * Implement hook_entity_info_alter().
 */
function concert_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['concert_list'] = array(
    'label' => t('Concert list'),
    'custom settings' => TRUE,
   );
}

/**
 * Implement hook_help()
 */
function concert_help($path, $arg) {
    switch ($path) {
      case 'concerts' :
        return "<p>" . t("The concert module provides a custom node type. You can create new Concert nodes using the <a href='!nodeadd'>node add form</a>.",
          array('!nodeadd' => url('node/add/concert'))) . "</p>";
	break;
      case 'admin/help#concert' :
	return "<p>" . t("The concert module provides node types for showing concerts and adding venues. ") . "</p>";
	break;
      }
}

/**
function concert_theme() {
  return array(
	'concert_table' => array(
	  'arguments' => array('variables' => NULL),
	  'file' => 'concert_theme_table.inc',
	),
  );
}
**/

/**
 * Implement hook_theme_registry_alter().
 */
function concert_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'concert');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _concert_insert_after_first_element($theme_registry[$h]['theme_paths'], $mod_path);
  }
  
  // override theme_table()
  if (isset($theme_registry['table'])) {
	$theme_registry['table']['function'] = 'theme_concert_table';
  }
}

function _concert_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  } 
}

function concert_date_format_types() {
  return array(
    'concert' => t('Concert date formats'),
  );
}

function concert_date_formats() {
  return array(
    array(
      'type' => 'concert',
      'format' => 'd F G:i',
      'locales' => '',
    ),
    array(
      'type' => 'concert',
      'format' => 'd M G:i',
      'locales' => '',
    ),
    array(
      'type' => 'concert',
      'format' => 'j F G:i',
      'locales' => '',
    ),
    array(
      'type' => 'concert',
      'format' => 'j M G:i',
      'locales' => '',
    ),
    array(
      'type' => 'concert',
      'format' => 'd F | G:i',
      'locales' => '',
    ),
    array(
      'type' => 'concert',
      'format' => 'd M | G:i',
      'locales' => '',
    ),
    array(
      'type' => 'concert',
      'format' => 'j F | G:i',
      'locales' => '',
    ),
    array(
      'type' => 'concert',
      'format' => 'j M | G:i',
      'locales' => '',
    ),
  );
}

function concert_admin_form($form, &$form_state) {
  $form['concert_admin'] = array(
    '#type' => 'vertical_tabs',
  );
  $form['concert_admin_general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#group' => 'concert_admin',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );
  $form['concert_admin_general']['test'] = array(
    '#type' => 'textfield',
    '#title' => 'test',
    
  );
  
  $form['concert_admin_list'] = array(
    '#type' => 'fieldset',
    '#title' => t('Concert list settings'),
    '#group' => 'concert_admin',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['concert_admin_list']['concert_admin_date_style'] = array(
    '#type' => 'radios',
    '#title' => t('Concert list date style'),
    '#description' => t('Choose a style for displaying the date in the concert list.'),
    '#options' => array(
      0 => t('Standard style.'),
      1 => t('Custom style'),
    ),
    '#default_value' => variable_get('concert_admin_date_style', 0),
    '#ajax' => array(
      'callback' => 'concert_admin_ajax_form_callback',
      'wrapper' => 'date-style-settings',
      'effect' => 'fade',
    ),
    '#required' => TRUE,
  );
  
  $types = array();
  $format_types = system_get_date_types();
  foreach ($format_types as $type => $type_info) {
    $types[] = $type;
  }
  
  
  
  $form['concert_admin_list']['date_style_settings'] = array(
    '#title' => t('Date style settings'),
    '#type' => 'fieldset',
    '#prefix' => '<div id="date-style-settings">',
    '#suffix' => '</div>',
  );
  
  if (isset($form_state['values']['concert_admin_date_style']) && $form_state['values']['concert_admin_date_style'] == 1
      || !isset($form_state['values']['concert_admin_date_style']) && variable_get('concert_admin_date_style') == 1) {
    $form['concert_admin_list']['date_style_settings']['concert_admin_custom_month'] = array(
      '#type' => 'textfield',
      '#title' => t('Concert list custom month format'),
      '#description' => t('Give the format for showing the month in custom display. Default \'F\'.'),
      '#default_value' => variable_get('concert_admin_custom_month', CONCERT_LIST_DATE_FORMAT_MONTH),
      '#size' => 4,
      '#maxlength' => 4,
    );
    
    $form['concert_admin_list']['date_style_settings']['concert_admin_custom_month_lc'] = array(
      '#type' => 'checkbox',
      '#title' => t('Concert list custom month lowercase'),
      '#description' => t('When checked the month is showed beginning with a lowercase in custom display'),
      '#default_value' => variable_get('concert_admin_custom_month_lc', CONCERT_LIST_MONTH_LOWERCASE),
    );
  }
  
  if (isset($form_state['values']['concert_admin_date_style']) && $form_state['values']['concert_admin_date_style'] == 0
      || !isset($form_state['values']['concert_admin_date_style']) && variable_get('concert_admin_date_style') == 0) {

    $selected_type = isset($form_state['values']['concert_admin_standard_type']) ? $types[$form_state['values']['concert_admin_standard_type']] : current($types);

    
    $form['concert_admin_list']['date_style_settings']['concert_admin_standard_type'] = array(
      '#type' => 'select',
      '#title' => t('Select date type'),
      '#description' => t('Select a date type. Choose Concert for a collection of date formats automatically created by Concert module. Choose Custom when you created a date format of the custom type.'),
      '#options' => $types,
      '#default_value' => 0,
      '#ajax' => array(
	'callback' => 'concert_admin_form_ajax_date_form',
	'wrapper' => 'date-format-select',
	'event' => 'change',
      ),
    );
    
    //if (!empty($form_state['values']['concert_admin_standard_type']) && $form_state['values']['concert_admin_standard_type'])
    $form['concert_admin_list']['date_style_settings']['concert_admin_standard_format'] = array(
      '#type' => 'select',
      '#title' => t('Date format'),
      '#description' => t('Choose a date format. Or <a href="@link">create a date format here</a>.', array('@link' => url('admin/config/regional/date-time/formats/add'))),
      //'#options' => concert_admin_date_format_populate($form_state['values']['concert_admin_standard_type']),
      '#options' => concert_admin_date_format_populate($selected_type),
      '#default_value' => variable_get('concert_admin_date_format', 0),
      '#prefix' => '<div id="date-format-select">',
      '#postfix' => '</div>',
    );
    
  }
  
  
  $form['concert_admin_list']['concert_admin_venue_unknown'] = array(
    '#type' => 'textfield',
    '#title' => t('Venue unknown string'),
    '#description' => t('Value to be shown when venue is unknown.'),
    '#default_value' => variable_get('concert_admin_venue_unknown', CONCERT_VENUE_UNKNOWN_STRING),
    '#size' => 200,
    '#maxlength' => 200,
  );
  
  $form['concert_admin_list']['concert_admin_table_header'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show header in concert list table'),
    '#description' => t('Select this option to show header in concert list table'),
    '#default_value' => variable_get('concert_admin_table_header', CONCERT_LIST_TABLE_HEADER),
  );
  
  $form['concert_admin_block'] = array(
    '#type' => 'fieldset',
    '#title' => t('Concert block settings'),
    '#group' => 'concert_admin',
  );
  
   $form['concert_admin_block']['date_style_settings'] = array(
    '#title' => t('Date style settings'),
    '#type' => 'fieldset',
    //'#prefix' => '<div id="date-style-settings">',
    //'#suffix' => '</div>',
  );
   
  $block_selected_type = isset($form_state['values']['concert_admin_block_standard_type']) ? $types[$form_state['values']['concert_admin_block_standard_type']] : current($types);

  
  $form['concert_admin_block']['date_style_settings']['concert_admin_block_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of concerts'),
    '#description' => t('Enter the number of concerts to be shown in the concert block'),
    '#default_value' => variable_get('concert_admin_block_limit', CONCERT_BLOCK_LIMIT),
    '#size' => 10,
    '#maxlength' => 2,
  );
  
    
  $form['concert_admin_block']['date_style_settings']['concert_admin_block_standard_type'] = array(
    '#type' => 'select',
    '#title' => t('Select date type'),
    '#description' => t('Select a date type. Choose Concert for a collection of date formats automatically created by Concert module. Choose Custom when you created a date format of the custom type.'),
    '#options' => $types,
    '#default_value' => 0,
    '#ajax' => array(
      'callback' => 'concert_admin_form_ajax_block_date_form',
      'wrapper' => 'block-date-format-select',
      'event' => 'change',
    ),
  );
  
  $form['concert_admin_block']['date_style_settigns']['concert_admin_block_title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show concert title'),
    '#description' => t('Show concer title in concert block'),
    '#default_value' => variable_get('concert_admin_block_title', 1),
  );
  
  //if (!empty($form_state['values']['concert_admin_standard_type']) && $form_state['values']['concert_admin_standard_type'])
  $form['concert_admin_block']['date_style_settings']['concert_admin_block_date_format'] = array(
    '#type' => 'select',
    '#title' => t('Date format'),
    '#description' => t('Choose a date format. Or <a href="@link">create a date format here</a>.', array('@link' => url('admin/config/regional/date-time/formats/add'))),
    //'#options' => concert_admin_date_format_populate($form_state['values']['concert_admin_standard_type']),
    '#options' => concert_admin_date_format_populate($block_selected_type),
    '#default_value' => variable_get('concert_admin_block_date_format', CONCERT_LIST_DATE_FORMAT),
    '#prefix' => '<div id="block-date-format-select">',
    '#postfix' => '</div>',
  );
    
    
  
  
  // Submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );
  
  return $form;
}

function concert_admin_date_format_populate($date_type) {
  $formats = array();
  drupal_static_reset('system_get_date_formats');
  
  /**
  $date_formats = system_get_date_formats(); 
  foreach ($date_formats as $type => $format_info) {
    $formats = array_merge($formats, $format_info);
  }
  $custom_formats = system_get_date_formats('custom');
  if (!empty($custom_formats)) {
    $formats = array_merge($formats, $custom_formats);
  }
  $concert_formats = system_get_date_formats('concert');
  if (!empty($concert_formats)) {
    $formats = array_merge($formats, $concert_formats);
  }
  **/
  
  $type_formats = system_get_date_formats($date_type);
  if (!empty($type_formats)) {
    $formats = array_merge($formats, $type_formats);
  }
  
  $choices = array();
  foreach ($formats as $f => $format) {
    $choices[$f] = format_date(REQUEST_TIME, 'custom', $f);
  }
  
  return $choices;
}

function concert_admin_ajax_form_callback($form, &$form_state) {
  return $form['concert_admin_list']['date_style_settings'];
}

function concert_admin_form_ajax_date_form($form, &$form_state) {
  return $form['concert_admin_list']['date_style_settings']['concert_admin_standard_format'];  
 }
 
 function concert_admin_form_ajax_block_date_form($form, &$form_state) {
  return $form['concert_admin_block']['date_style_settings']['concert_admin_block_date_format'];
 }
/**
 * Save configuration settings
 */
function concert_admin_form_submit($form, &$form_state) {
  variable_set('concert_admin_date_style', $form_state['values']['concert_admin_date_style']);
  if (variable_get('concert_admin_date_style') == 1) {
    variable_set('concert_admin_custom_month', $form_state['values']['concert_admin_custom_month']);
    variable_set('concert_admin_custom_month_lc', $form_state['values']['concert_admin_custom_month_lc']);
  }
  if (variable_get('concert_admin_date_style') == 0) {
    variable_set('concert_admin_date_format', $form_state['values']['concert_admin_standard_format']);
  }
  variable_set('concert_admin_venue_unknown', $form_state['values']['concert_admin_venue_unknown']);
  variable_set('concert_admin_table_header', $form_state['values']['concert_admin_table_header']);
  
  variable_set('concert_admin_block_date_format', $form_state['values']['concert_admin_block_date_format']);
  variable_set('concert_admin_block_limit', $form_state['values']['concert_admin_block_limit']);
  variable_set('concert_admin_block_title', $form_state['values']['concert_admin_block_title']);
}
/**
 * Implements hook_form_alter()
 *
 * hide the concert_year field from the form
 */
function concert_form_alter(&$form, &$form_state, $form_id) {
  $form['test_form_id'] = array(
    '#type' => 'item',
    '#title' => t('Form ID'),
    '#markup' => $form_id,
    '#weight' => -100,
  );
  
  if($form_id == "concert_node_form") {
    $form['title']['#title'] = t('New Form Title');
	
    /**
    $form['path']['#access'] = FALSE;
    $form['menu']['#access'] = FALSE;
    $form['author']['#access'] = FALSE;
    $form['options']['#access'] = FALSE;
    $form['comment_settings']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    $form['additional_settings']['#access'] = FALSE;
    **/
    
    $node = $form['#node'];
    $form['concert_venue_radio'] = array(
      '#title' => t("Choose a venue from the database or add one manually"),
      '#type' => 'radios',
      '#options' => array(0 => t('Add a venue from the database.'),
					      1 => t('Add a venue manually.'),),
      //'#default_value' => 0, 
      '#default_value' => $node->venue_select['radio'],
      '#required' => TRUE,
      '#ajax' => array(
	    'callback' => 'concert_venue_callback',
	    'wrapper' => 'venue_select',
	    'effect' => 'fade',
      ),
    );
    
    $form['venue_select'] = array(
      '#prefix' => '<div id = "venue_select">',
      '#suffix' => '</div>',
      '#type' => 'fieldset',
    );
    
    if (!empty($form_state['values']['concert_venue_radio']) && $form_state['values']['concert_venue_radio'] == '1'
	      || empty($form_state['values']) && $node->venue_select['radio']) {
	      
      $form['venue_select']['concert_venue_location'] = array(
	    '#type' => 'textfield',
	    '#title' => t('location'),
	    '#default_value' => empty($form_state['values']['concert_venue_location']) ?
						    $node->venue_select['location'] :
						    $form_state['values']['concert_venue_location'],
	    
      );
      $form['venue_select']['concert_venue_city'] = array(
	    '#type' => 'textfield',
	    '#title'=> t('city'),
	    '#default_value' => empty($form_state['values']['concert_venue_city']) ?
						    $node->venue_select['city'] :
						    $form_state['values']['concert_venue_city'],
      );
    } 
    else {
      $form['venue_select']['concert_venue_node'] = array(
	'#type' => 'select',
	'#options' => _concert_content_type_venue_options_list(),
	'#title' => t('venue node select'),
	//'#default_value' => '645',
	
	'#default_value' => empty($form_state['values']['concert_venue_node']) ?
						$node->venue_select['node'] :
						$form_state['values']['concert_venue_node'],    
      );	      
    }
  
  // Get rid of illegal choice warnings. TODO: write own validation.
  $form['concert_venue_radio']['#validated'] = TRUE;
  $form['venue_select']['concert_venue_node']['#validated'] = TRUE;
  }
}

function concert_venue_callback($form, $form_state) {
  return $form['venue_select'];
}

/**
 * Implements hook_node_submit().
 */
function concert_node_submit($node, $form, &$form_state) {
  if ($node->type == "concert") {
    $values = $form_state[ 'values'];
    $node->venue_select['radio'] = $values['concert_venue_radio'];
    $node->venue_select['node'] = isset($values['concert_venue_node']) ? $values['concert_venue_node'] : 0;
    $node->venue_select['location'] = isset($values['concert_venue_location']) ? $values['concert_venue_location'] : '';
    $node->venue_select['city'] = isset($values['concert_venue_city']) ? $values['concert_venue_city'] : '';
  }
}

/**
 * Implements hook_node_prepare().
 */
function concert_node_prepare($node) {
  if ($node->type == "concert") { 
    if (empty($node->venue_select)) {
	  $node->venue_select['radio'] = 0;
	  $node->venue_select['node'] = '672';
	  $node->venue_select['location'] = '';
	  $node->venue_select['city'] = '';
	}
  }
}

/**
 * Implements hook_node_load().
 */
function concert_node_load($nodes, $types) {
  $result = db_query('SELECT * FROM {concert_venue} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)))->fetchAllAssoc('nid');
  
  foreach ($nodes as &$node) {
	$node->venue_select['radio'] = isset($result[$node->nid]->concert_venue_check) ? $result[$node->nid]->concert_venue_check : 0;
	$node->venue_select['node'] = isset($result[$node->nid]->concert_venue_node) ? $result[$node->nid]->concert_venue_node : 0;
	$node->venue_select['location'] = isset($result[$node->nid]->concert_venue_location) ? $result[$node->nid]->concert_venue_location : '';
	$node->venue_select['city'] = isset($result[$node->nid]->concert_venue_city) ? $result[$node->nid]->concert_venue_city : '';
  }
}

/** 
 * Implements hook_node_insert().
 */
function concert_node_insert($node) {
  if (isset($node->venue_select)) {
    db_insert('concert_venue')
      ->fields(array(
	    'nid' => $node->nid,
	    'concert_venue_node' => (int)$node->venue_select['node'],
	    'concert_venue_location' => $node->venue_select['location'],
	    'concert_venue_city' => $node->venue_select['city'],
	    'concert_venue_check' => $node->venue_select['radio'],
	  ))
	  ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function concert_node_update($node) {
  if (db_select('concert_venue', 'c')->fields('c')->condition('nid', $node->nid, '=')->execute()->fetchAssoc()) {
	db_update('concert_venue')
	->fields(array(
	  'concert_venue_node' => $node->venue_select['node'],
	  'concert_venue_location' => $node->venue_select['location'],
	  'concert_venue_city' => $node->venue_select['city'],
	  'concert_venue_check' => $node->venue_select['radio'],
	))
	->condition('nid', $node->nid)
	->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function concert_node_delete($node) {
  db_delete('concert_venue')
  ->condition('nid', $node->nid)
  ->execute();
}

/**
 * Implements hook_block_info().
 */

function concert_block_info() {
  $blocks = array();
  $blocks['coming_concerts'] = array(
    'info' => t('Show upcoming concerts'),
    'cache' => DRUPAL_NO_CACHE,
  ); 
  return $blocks;
}

/**
 * Implement hook_block_view().
 */

function concert_block_view($block_name = ''){
  if ($block_name == 'coming_concerts') {
    $time_stamp = time();
    $now = date('o-m-d',$time_stamp)."T".date('H:i:s',$time_stamp);
    
    //$result = concert_find_concerts(OPERATOR_COMING, 'ASC', 3);
    $result = concert_get_concerts(OPERATOR_COMING, 'ASC', variable_get('concert_block_limit'));
    
    /**
    if (isset($result['node'])) {
      $items_nids = array_keys($result['node']);
      $items = entity_load('node', $items_nids);
    }
    
    
    foreach ($result as $row) { 
      $block['content']['concerts'][] = node_view_multiple($items, 'concert_list');
    }
    **/
    
    $block['subject'] = t('Upcoming concerts');

    $items = array();
    
    foreach ($result as $row) {
      
      $dateObject = new DateObject($row->concert_date_value, NULL, 'Y-m-d\TH:i:s');
      
      $date = date_format_date($dateObject, 'custom', variable_get('concert_admin_block_date_format'));
      $item = array();
      $item['children'][] = $date;
      if (variable_get('concert_admin_block_title')) $item[] = $row->title;
      $item['children'][] = concert_get_venue($row->nid, TRUE);
      
      $items[] = $item;

    }
    
    
    $block['content']['list'] = array(
      '#theme' => 'item_list',
      '#items' =>  $items,
    );
    
    
    
    $block['content']['more'] = array(
      '#theme' => 'more_link',
      '#url' => 'concerts',
      '#title' => t('Meer concerten'),
    );
    
    return $block;
  }
}

function concert_find_concerts($operator, $order = 'ASC', $limit = 0, $year = NULL) {
  $time_stamp = time();
  $now = date('o-m-d',$time_stamp)."T".date('H:i:s',$time_stamp);
  
  $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'concert')
      ->propertyCondition('status', 1)
      ->fieldCondition('concert_date', 'value', $now, $operator)
      ->fieldOrderBy('concert_date','value', $order);
  
  if ($year)
    $query->where('EXTRACT(YEAR FROM concert_date_value) = :year', array('year' => $year));
	
  if ($limit > 0)
    $query->range(0, $limit);
   
  $result = $query->execute();
  return $result;
}

function concert_get_years($show_archive, $now) {
  if ($show_archive == TRUE) {
    $result = db_query('SELECT EXTRACT(YEAR FROM concert_date_value) AS year
			FROM {field_data_concert_date} d
			WHERE d.concert_date_value < :now GROUP BY year ORDER BY d.concert_date_value DESC',
			array(':now' => $now)
			);
  }
  else if ($show_archive == FALSE) {
    $result = db_query('SELECT EXTRACT (YEAR FROM concert_date_value) AS year
		    FROM {field_data_concert_date} d
			WHERE d.concert_date_value >= :now GROUP BY year ORDER BY d.concert_date_value ASC',
			array(':now' => $now)
			);
  }  
  return $result;
}

function concert_get_venue($nid, $string = TRUE) {
  
  $venue = variable_get('concert_admin_venue_unknown');
  $result = db_query('SELECT * FROM {concert_venue} WHERE nid = :nid', array(':nid' => $nid))->fetchAll();
  
  if ($string) { 
    if (isset($result[0]->concert_venue_check) && $result[0]->concert_venue_check == 0) { //db
      if ($result[0]->concert_venue_node != "0") {
	$node = node_load($result[0]->concert_venue_node); // if... ?
	if ($node->title) {
	  $venue = $node->title;
	} else if ($node->location && $node->city) {
	  $venue = $node->venue_location[0]['und']['value'] . "<br/>" . $node->venue_city[0]['und']['value'];
	}
      }	
    } else if (isset($result[0]->concert_venue_check) && $result[0]->concert_venue_check == 1) { //manually
      $venue = $result[0]->concert_venue_location  . "<br/>" . $result[0]->concert_venue_city;
    }
    return $venue;
  }
    
  if (!$string) {
    if (isset($result[0]->concert_venue_check) && $result[0]->concert_venue_check == 0) {
      if ($result[0]->concert_venue_node != "0") {
	$node = node_load($result[0]->concert_venue_node); // if... ?
	if ($node->location && $node->city) {
	  $venue_array = array(
	    'location' => $node->location,
	    'city' => $node->city,
	  );
	}
      }
    }
    return $venue_array;
  }
}


function concert_get_concerts($operator, $order, $limit, $year = NULL ) {
  $time_stamp = time();
  $now = date('o-m-d',$time_stamp)."T".date('H:i:s',$time_stamp);
  
  $query = db_select('node', 'n');
  $query->join('field_data_concert_date', 'f', 'n.nid = f.entity_id');
  $query
    ->fields('n', array('nid', 'title'))
    ->addField('f', 'concert_date_value');	
  $query	
    ->condition('n.type', 'concert')
    ->condition('n.status', 1);
  
  if ($year)
    $query
      ->where('EXTRACT(YEAR FROM f.concert_date_value) = :year', array('year' => $year));
  
  $query
    ->condition('f.concert_date_value', $now, $operator)	
    ->orderBy('f.concert_date_value', $order);
    
  if ($limit)
    $query->range(0, $limit);
	
  $result = $query->execute();
  return $result;
}
